const express = require('express');
const router = express.Router();
const Task = require('../models/Task');
const TimeLog = require('../models/TimeLog');
const {
  isAuthenticated,
  isAdmin,
  isManagerOrAdmin,
  isEmployee
} = require('../middlewares/auth');

/**
 * 🧾 View all time logs for the current user
 */
router.get('/timelogs', isAuthenticated, async (req, res) => {
  try {
    const logs = await TimeLog.find({ user: req.session.user._id }).populate('task');
    res.render('timelogs', { logs });
  } catch (err) {
    console.error('Error loading time logs:', err);
    res.status(500).send('Could not load time logs');
  }
});

/**
 * 📝 Manual Time Log Form (per Task)
 */
router.get('/tasks/:id/logtime', isAuthenticated, async (req, res) => {
    const task = await Task.findById(req.params.id);
    const logs = await TimeLog.find({ user: req.session.user._id, task: req.params.id });

    res.render('logtime_form', { task, logs }); // ✅ now logs is available
});


/**
 * 💾 Save Manual Time Log
 */
router.post('/tasks/:id/logtime', isAuthenticated, async (req, res) => {
  try {
    const { description, duration, billable } = req.body;

    await TimeLog.create({
      task: req.params.id,
      user: req.session.user._id,
      description,
      duration: parseInt(duration),
      billable: billable === 'on',
      createdAt: new Date()
    });

    res.redirect('/timelogs');
  } catch (err) {
    console.error('Error saving time log:', err);
    res.status(500).send('Could not save time log');
  }
});

/**
 * ▶️ Start Timer
 */
router.post('/tasks/:id/start-timer', isAuthenticated, async (req, res) => {
  try {
    const running = await TimeLog.findOne({
      user: req.session.user._id,
      task: req.params.id,
      endTime: null
    });

    if (running) return res.send('⏱️ Timer already running for this task.');

    await TimeLog.create({
      task: req.params.id,
      user: req.session.user._id,
      startTime: new Date()
    });

    res.redirect('/timelogs');
  } catch (err) {
    console.error('Error starting timer:', err);
    res.status(500).send('Could not start timer');
  }
});

/**
 * ⏹️ Stop Timer
 */
router.post('/tasks/:id/stop-timer', isAuthenticated, async (req, res) => {
  try {
    const timer = await TimeLog.findOne({
      user: req.session.user._id,
      task: req.params.id,
      endTime: null
    });

    if (!timer) return res.send('⚠️ No active timer found.');

    const endTime = new Date();
    const duration = Math.round((endTime - timer.startTime) / 60000);

    timer.endTime = endTime;
    timer.duration = duration;
    await timer.save();

    res.redirect('/timelogs');
  } catch (err) {
    console.error('Error stopping timer:', err);
    res.status(500).send('Could not stop timer');
  }
});

/**
 * 🗂️ View Log Form with Logs (Combined View)
 */
router.get('/logtime', isAuthenticated, async (req, res) => {
  try {
    const logs = await TimeLog.find({ user: req.session.user._id }).populate('task');
    res.render('logtime_form', { logs });
  } catch (err) {
    console.error('Error fetching time logs for combined view:', err);
    res.status(500).send('Could not load logtime form');
  }
});

module.exports = router;
